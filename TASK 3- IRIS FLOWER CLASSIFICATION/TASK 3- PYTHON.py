# -*- coding: utf-8 -*-
"""Abhi_Task3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1julhunZGzqVaI5hRXgcns48HRYl_wXak

***TASK 3: IRIS FLOWER CLASSIFICATION***
**NAME: ABHISHEK BARAI**
**BATCH: JULY**
**DOMAIN: DATA SCIENCE**
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

"""***IMPORTING DATASET***"""

df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/IRIS.csv', header=None)
df.columns = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species']
df.head()

print(df.dtypes)

df['species'].categories =pd.factorize(['species'])
df.head()

df.describe

df.isna().sum()

import matplotlib.pyplot as plt

# Ensure all relevant columns are numeric
df['petal_length'] = pd.to_numeric(df['petal_length'], errors='coerce')
df['petal_width'] = pd.to_numeric(df['petal_width'], errors='coerce')

if df['species'].dtype == 'object':
    df['species_num'] = df['species'].astype('category').cat.codes
else:
    df['species_num'] = df['species']

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

# The error was here. The column names were being passed as strings, not the actual data
ax.scatter(df['petal_length'], df['petal_width'], df['species_num']) # Use the numerical species column

ax.set_xlabel('petal_length')
ax.set_ylabel('petal_width')
ax.set_zlabel('species')
plt.title('3D Scatter Plot Example')
plt.show()

sns.scatterplot(data=df, x='petal_length',y='sepal_width',hue='species');

!pip install -q sklearn
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.impute import SimpleImputer

k_rng = range(1,20)
sse=[]

imputer = SimpleImputer(strategy='mean')
df[['petal_length', 'petal_width']] = imputer.fit_transform(df[['petal_length', 'petal_width']])

for k in k_rng:
  km = KMeans(n_clusters=k)
  km.fit(df[['petal_length','petal_width']])
  sse.append(km.inertia_)

sse

plt.xlabel('k_rng')
plt.ylabel('sse')
plt.plot(k_rng,sse)

"""**APPLYING KMEAN ALGORITH**"""

km = KMeans(n_clusters=3, random_state=0)
y_predicted = km.fit_predict(df[['petal_length','petal_width']])
y_predicted

df['cluster']= y_predicted
df.head(150)

"""**ACCURACY MEASURE**"""

from sklearn.metrics import confusion_matrix
import pandas as pd

df['species_encoded'] = pd.factorize(df['species'])[0]

cm = confusion_matrix(df['species_encoded'], df.cluster)
print(cm)

from sklearn.metrics import confusion_matrix
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np


predicted_labels = predicted_labels.map({0: 'setosa', 1: 'versicolor', 2: 'virginica'})

cm = confusion_matrix(true_labels, predicted_labels)
class_labels= ['setosa','versicolor','virginica']

plt.imshow(cm, interpolation='nearest', cmap=plt.cm.Blues)
plt.title('Confusion Matrix')
plt.colorbar()
tick_marks = np.arange(len(class_labels))
plt.xticks(tick_marks, class_labels, rotation=45)
plt.yticks(tick_marks, class_labels)

for i in range(len(class_labels)):
    for j in range(len(class_labels)):
        plt.text(j, i, str(cm[i][j]), ha='center', va='center', color='white')
plt.xlabel('Predicted')
plt.ylabel('True')
plt.show()

"""***TASK 3 COMPLETED***"""